<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UserNotification</name>
    </assembly>
    <members>
        <member name="T:UserNotification.Events.ShowNotificationEventHandler">
            <summary>
            Event handler delegation method to be used when handling <seealso cref="T:UserNotification.Events.ShowNotificationEvent"/> events.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserNotification.Events.ShowNotificationEvent">
            <summary>
            This class is used to message the fact that the sub-system would like to show another notification
            to the user.
            
            Expectation: The connected view is processing the event and shows a (pop-up) message to the user.
            </summary>
        </member>
        <member name="M:UserNotification.Events.ShowNotificationEvent.#ctor(System.String,System.String,System.Windows.Media.Imaging.BitmapImage)">
            <summary>
               Initializes a new instance of the ShowNotificationEvent class.
            </summary>
            <param name="imageIcon"></param>
            <param name="message"></param>
            <param name="title"></param>
        </member>
        <member name="P:UserNotification.Events.ShowNotificationEvent.Title">
            <summary>
            Get the title string of notification.
            </summary>
        </member>
        <member name="P:UserNotification.Events.ShowNotificationEvent.Message">
            <summary>
            Get message of notification.
            </summary>
        </member>
        <member name="P:UserNotification.Events.ShowNotificationEvent.ImageIcon">
            <summary>
            Get url string to an image resource that represents this type of notification.
            </summary>
        </member>
        <member name="T:UserNotification.Interfaces.INotifyableViewModel">
            <summary>
            This interface can be used to connect viewmodel with view
            when showing notifications that can pop-up over a window
            or over all currently visible windows (IsTopMost = true in notification viewmodel)
            </summary>
        </member>
        <member name="E:UserNotification.Interfaces.INotifyableViewModel.ShowNotificationMessage">
            <summary>
            Expose an event that is triggered when the viewmodel tells its view:
            Here is another notification message please show it to the user.
            </summary>
        </member>
        <member name="T:UserNotification.Local.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:UserNotification.Local.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:UserNotification.Local.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:UserNotification.Local.Strings.Close_Tip_Label">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="T:UserNotification.Themes.ResourceKeys">
            <summary>
            Resource key management class to keep track of all resources
            that can be re-styled in applications that make use of the implemented controls.
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.ControlAccentColorKey">
            <summary>
            Accent Color Key - This Color key is used to accent elements in the UI
            (e.g.: Color of Activated Normal Window Frame, ResizeGrip, Focus or MouseOver input elements)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.ControlAccentBrushKey">
            <summary>
            Accent Brush Key - This Brush key is used to accent elements in the UI
            (e.g.: Color of Activated Normal Window Frame, ResizeGrip, Focus or MouseOver input elements)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.ControlNormalBackgroundKey">
            <summary>
            Resource key of the controls normal background brush key.
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.NotificationWindowBackground">
            <summary>
            Background brush key of the NotificationWindow.
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.NotificationWindowBorder">
            <summary>
            Border brush key of the border of the NotificationWindow.
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.NotificationWindowForeground">
            <summary>
            Foreground brush key the border of the NotificationWindow.
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.DefaultedBorderBrush">
            <summary>
            Border brush key of the focused border (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.DisabledForegroundBrush">
            <summary>
            Border brush key of the disabled border (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.DisabledBackgroundBrush">
            <summary>
            Background brush key of the disabled control (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.DisabledBorderBrush">
            <summary>
            Broder brush key of the disabled control (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.NormalBorderBrush">
            <summary>
            Border brush key of the border (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.CloseNormal">
            <summary>
            Normal background brush key (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.CloseOver">
            <summary>
            Mouse over border brush key (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.ClosePressed">
            <summary>
            Button pressed background brush key (of the close button)
            </summary>
        </member>
        <member name="F:UserNotification.Themes.ResourceKeys.Image_Close_Button">
            <summary>
            Image resource key of the close button.
            </summary>
        </member>
        <member name="T:UserNotification.ViewModel.Base.ViewModelBase">
            <summary>
            Implements the <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface to supply
            a base for viewmodel classes in an MVVM pattern like application.
            </summary>
        </member>
        <member name="E:UserNotification.ViewModel.Base.ViewModelBase.PropertyChanged">
            <summary>
            Implements the property changed event of the <seealso cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface.
            </summary>
        </member>
        <member name="M:UserNotification.ViewModel.Base.ViewModelBase.RaisePropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Tell bound controls (via WPF binding) to refresh their display.
            
            Sample call: this.NotifyPropertyChanged(() => this.IsSelected);
            where 'this' is derived from <seealso cref="T:UserNotification.ViewModel.Base.ViewModelBase"/>
            and IsSelected is a property.
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="property"></param>
        </member>
        <member name="M:UserNotification.ViewModel.Base.ViewModelBase.RaisePropertyChanged(System.String)">
            <summary>
            Base function to raise a property changed event for the given named property.
            </summary>
            <param name="propertyName">Name of property to raise the event for.</param>
        </member>
        <member name="T:UserNotification.ViewModel.NotificationViewModel">
            <summary>
            The notification viewmodel organized the backend logic necessary to show the
            information content for notifying users about something happening ...
            
            Based on: http://www.codeproject.com/Articles/499241/Growl-Alike-WPF-Notifications
            </summary>
        </member>
        <member name="M:UserNotification.ViewModel.NotificationViewModel.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:UserNotification.ViewModel.NotificationViewModel.Id">
            <summary>
            Get/set notification id.
            </summary>
        </member>
        <member name="P:UserNotification.ViewModel.NotificationViewModel.Title">
            <summary>
            Get/set title of notification
            </summary>
        </member>
        <member name="P:UserNotification.ViewModel.NotificationViewModel.Message">
            <summary>
            Get/set message of notification
            </summary>
        </member>
        <member name="P:UserNotification.ViewModel.NotificationViewModel.ImageIcon">
            <summary>
            Get/set ImageUrl to (icon) image shown in the notification
            </summary>
        </member>
        <member name="P:UserNotification.ViewModel.NotificationViewModel.IsTopmost">
            <summary>
            Get/set property to determine whether notification
            is shown in a topmost window or not.
            </summary>
        </member>
        <member name="P:UserNotification.ViewModel.NotificationViewModel.ViewHeight">
            <summary>
            Get/set height of view that displays the notification.
            </summary>
        </member>
        <member name="P:UserNotification.ViewModel.NotificationViewModel.ViewWidth">
            <summary>
            Get/set width of view that displays the notification.
            </summary>
        </member>
        <member name="T:UserNotification.ViewModel.SendNotificationViewModel">
            <summary>
            Implements the viewmodel events and methods to send a notification to an attached view.
            </summary>
        </member>
        <member name="E:UserNotification.ViewModel.SendNotificationViewModel.ShowNotificationMessage">
            <summary>
            Standard notifiaction event of <seealso cref="T:UserNotification.Interfaces.INotifyableViewModel"/>
            </summary>
        </member>
        <member name="M:UserNotification.ViewModel.SendNotificationViewModel.ShowNotification(System.String,System.String,System.Windows.Media.Imaging.BitmapImage)">
            <summary>
            Sends a notification event to a view which will display a corresponding message, if any
            view has subscribed to the event in this object.
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="imageIcon"></param>
            <returns>true if notifiaction was successfully send (view is attached to event)
            or , otherwise, false</returns>
        </member>
        <member name="T:UserNotification.View.NotifyableContentControl">
             <summary>
             This class implements a control that can be used to extend any standard control
             (eg: ListBox, TreeView) with a notification functionality. A notification is a
             small pop-up window that gives users feedback as to why somethings not working
             or what a user might be able to do to use a function correctly.
            
             This control is based on <seealso cref="T:System.Windows.Controls.ContentControl"/>. Application developers
             can use this fact to contain any other standard control (say TextBox) inside this
             control. The Notification dependency property can then be used to show notifications
             in the vicinity of the contained control.
            
             This allows application developers to extend any control (eg: ListBox, TreeView)
             with a notification facility since application developers can invoke the
             ShowNotification event in the INotifyableViewModel interface  to show a
             short pop-up message to the user. The pop-up message is shown in the
             vicinity of the content control that contains the real control (eg: ListBox)
             to which this notfication is related to.
             </summary>
        </member>
        <member name="F:UserNotification.View.NotifyableContentControl.NotificationProperty">
            <summary>
            Gets/sets the notification dependency property that can be used to show
            user notification as pop-up object over the normal UI.
            </summary>
        </member>
        <member name="F:UserNotification.View.NotifyableContentControl.mViewModel">
            <summary>
            Is a viewmodel which keeps the command binding and event triggering to base the notifications on
            Using this setup tests the real world scenario where notifications are triggered through
            complex conditions in the viewmodel. These worklflows are not necessarily triggered by a button in a view.
            </summary>
        </member>
        <member name="M:UserNotification.View.NotifyableContentControl.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:UserNotification.View.NotifyableContentControl.Notification">
            <summary>
            Gets/sets the notification dependency property that can be used to show
            user notification as pop-up object over the normal UI.
            </summary>
        </member>
        <member name="M:UserNotification.View.NotifyableContentControl.OnNofitivationChange(UserNotification.Interfaces.INotifyableViewModel,UserNotification.Interfaces.INotifyableViewModel)">
            <summary>
            Method is invoked when the nofitivation dependency property is changed.
            This requires changing event hook-up on attached viewmodel to enable
            notification event conversion from viewmodel into view.
            </summary>
            <param name="oldValue"></param>
            <param name="newValue"></param>
        </member>
        <member name="M:UserNotification.View.NotifyableContentControl.ViewModel_ShowNotificationMessage(System.Object,UserNotification.Events.ShowNotificationEvent)">
            <summary>
            Method is invoked when the viewmodel tells the view: Show another notification to the user.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.NotifyableContentControl.ShowNotification(System.String,System.String,System.Boolean)">
            <summary>
            Shows a notification warning to the user to clarify the current application behavior.
            </summary>
            <param name="title"></param>
            <param name="message"></param>
            <param name="notifiedFromViewmodel"></param>
        </member>
        <member name="M:UserNotification.View.NotifyableContentControl.GetDpObjectFromVisualTree(System.Windows.DependencyObject,System.Type)">
            <summary>
            Walk visual tree to find the first DependencyObject of a specific type.
            (This method works for finding a ScrollViewer within a TreeView).
            </summary>
        </member>
        <member name="T:UserNotification.View.NotifyableWindow">
            <summary>
            Interaction logic for NotifyableWindow.xaml
            
            Based on: 
            </summary>
        </member>
        <member name="M:UserNotification.View.NotifyableWindow.#ctor">
            <summary>
            Class Constructor
            </summary>
        </member>
        <member name="M:UserNotification.View.NotifyableWindow.MsgBoxView_DataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Method is invoked when the datacontext is changed.
            This requires changing event hook-up on attached viewmodel to enable
            notification event conversion from viewmodel into view.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.NotifyableWindow.ViewModel_ShowNotificationMessage(System.Object,UserNotification.Events.ShowNotificationEvent)">
            <summary>
            Method is invoked when the viewmodel tells the view: Show another notification to the user.
            (override this method if you want to use a different viewmodel and custom (re-styled) notification view.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.NotifyableWindow.SetNextNotificationPosition(UserNotification.ViewModel.NotificationViewModel)">
            <summary>
            Method is invoked to re-position the notification view such that it is close to the owning view.
            </summary>
        </member>
        <member name="M:UserNotification.View.NotifyableWindow.OnMsgBoxView_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Method is invoked when the window is Loaded to set the notification owner property.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.NotifyableWindow.NotifyableWindow_Unloaded(System.Object,System.EventArgs)">
            <summary>
            Free notification resources when parent window is being closed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:UserNotification.View.NotificationCloseButton">
            <summary>
            Implements a look-less control that should function and look like a window (X) close button.
            </summary>
        </member>
        <member name="T:UserNotification.View.NotificationWindow">
            <summary>
            This class is used to view the content of a notification window.
            
            Based on: http://www.codeproject.com/Articles/499241/Growl-Alike-WPF-Notifications
            </summary>
            <summary>
            NotificationWindow
            </summary>
        </member>
        <member name="M:UserNotification.View.NotificationWindow.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:UserNotification.View.NotificationWindow.CanClose">
            <summary>
            Determine whether window can be closed or whether closing
            via standard close functions should be cancelled in Closing override method.
            </summary>
        </member>
        <member name="M:UserNotification.View.NotificationWindow.CloseInvokedByParent">
            <summary>
            Is called by parent window to tell the window to close for good
            since parent view is also closing.
            </summary>
        </member>
        <member name="M:UserNotification.View.NotificationWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Overrides closing window behaviour to avoid that a user can close a notification
            via ALT+F4 or Esc key. Overiding this is required since a window that is closed
            cannot be shown via Show again - one would have to re-create the entire window
            with new - which is not part of the current concept.
            
            Current concept is: use Show/hide durring livetime of hosting window and close
            when hosting window is closed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.NotificationWindow.ShowNotification(UserNotification.ViewModel.NotificationViewModel)">
            <summary>
            Show a new notification to the user.
            </summary>
            <param name="notification"></param>
        </member>
        <member name="M:UserNotification.View.NotificationWindow.HideNotification">
            <summary>
            Hide the notification window.
            </summary>
        </member>
        <member name="M:UserNotification.View.NotificationWindow.NotificationWindowSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            This method is invoked via XAML code to tell the code behind
            that a notification is about to dissapper.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.NotificationWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:UserNotification.View.SimpleNotificationWindow">
            <summary>
            This class is used to view the content of a notification window.
            
            Based on: http://www.codeproject.com/Articles/499241/Growl-Alike-WPF-Notifications
            </summary>
            <summary>
            SimpleNotificationWindow
            </summary>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:UserNotification.View.SimpleNotificationWindow.CanClose">
            <summary>
            Determine whether window can be closed or whether closing
            via standard close functions should be cancelled in Closing override method.
            </summary>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.CloseInvokedByParent">
            <summary>
            Is called by parent window to tell the window to close for good
            since parent view is also closing.
            </summary>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.OnClosing(System.ComponentModel.CancelEventArgs)">
            <summary>
            Overrides closing window behaviour to avoid that a user can close a notification
            via ALT+F4 or Esc key. Overiding this is required since a window that is closed
            cannot be shown via Show again - one would have to re-create the entire window
            with new - which is not part of the current concept.
            
            Current concept is: use Show/hide durring livetime of hosting window and close
            when hosting window is closed.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.SetNextNotificationPosition(System.Windows.Media.Visual)">
            <summary>
            Method is invoked to re-position the notification view such that it is close to the owning view.
            </summary>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.ShowNotification(UserNotification.ViewModel.NotificationViewModel,System.Windows.Media.Visual)">
            <summary>
            Show a new notification to the user.
            </summary>
            <param name="notification"></param>
            <param name="view"></param>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.HideNotification">
            <summary>
            Hide the notification window.
            </summary>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.NotificationWindowSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            This method is invoked via XAML code to tell the code behind
            that a notification is about to dissapper.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:UserNotification.View.SimpleNotificationWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
